modFit<-train(Survived~.-Name-Ticket-PassengerId-Fare,data=training,method="lda")
url = "E:\\My Document\\我的项目\\自学课程\\Kaggle Projects\\Titanic Survivors\\"
training = read.csv(paste0(url,"train.csv"))
testing = read.csv(paste0(url,"test.csv"))
dim(training)
dim(testing)
training[training$Survived==0,]$Survived<-"Dead"
training[training$Survived==1,]$Survived<-"Survived"
training<-transform(training,Survived=as.factor(Survived))
training<-transform(training,Pclass=as.factor(Pclass))
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
temp<-training[!is.na(training$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges['male']
training[is.na(training$Age)&(training$Sex=="female"),]$Age<-AvrAges['female']
modFit<-train(Survived~.-Name-Ticket-PassengerId-Fare,data=training,method="lda")
modFit
url = "E:\\My Document\\我的项目\\自学课程\\Kaggle Projects\\Titanic Survivors\\"
training = read.csv(paste0(url,"train.csv"))
testing = read.csv(paste0(url,"test.csv"))
dim(training)
dim(testing)
training[training$Survived==0,]$Survived<-"Dead"
training[training$Survived==1,]$Survived<-"Survived"
training<-transform(training,Survived=as.factor(Survived))
training<-transform(training,Pclass=as.factor(Pclass))
temp<-training[!is.na(training$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges['male']
training[is.na(training$Age)&(training$Sex=="female"),]$Age<-AvrAges['female']
library(e1071)
modFit<-svm(Survived~.-Name-Ticket-PassengerId-Fare,data=training,kernal="linear",cost=10,gamma=0.5)
confusionMatrix(modFit$fitted,training$Survived)
library(caret)
library(e1071)
modFit<-svm(Survived~.-Name-Ticket-PassengerId-Fare,data=training,kernal="linear",cost=10,gamma=0.5)
confusionMatrix(modFit$fitted,training$Survived)
pred<-predict(modFit,testing)
anyNa<-function(column) any(is.na(column))
apply(testing,2,anyNa)
testing<-transform(testing,Pclass=as.factor(Pclass))
temp<-testing[!is.na(testing$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
testing[is.na(testing$Age)&(testing$Sex=="male"),]$Age<-AvrAges['male']
testing[is.na(testing$Age)&(testing$Sex=="female"),]$Age<-AvrAges['female']
pred<-predict(modFit,testing)
testing$Survived<-as.factor("Survived")
pred<-predict(modFit,testing)
names(modFit)
pred<-predict(modFit,training)
dim(testing)
dim(training)
pred<-predict(modFit,testing)
url = "E:\\My Document\\我的项目\\自学课程\\Kaggle Projects\\Titanic Survivors\\"
training = read.csv(paste0(url,"train.csv"))
testing = read.csv(paste0(url,"test.csv"))
dim(training)
dim(testing)
?read.csv
url = "E:\\My Document\\我的项目\\自学课程\\Kaggle Projects\\Titanic Survivors\\"
training = read.csv(paste0(url,"train.csv"),na.strings="")
testing = read.csv(paste0(url,"test.csv"),na.strings="")
str(training)
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
apply(testing,2,anyNa)
training[training$Survived==0,]$Survived<-"Dead"
training[training$Survived==1,]$Survived<-"Survived"
training<-transform(training,Survived=as.factor(Survived))
training<-transform(training,Pclass=as.factor(Pclass))
testing<-transform(testing,Pclass=as.factor(Pclass))
testing$Survived<-as.factor("Survived")
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
apply(testing,2,anyNa)
temp<-training[!is.na(training$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges['male']
training[is.na(training$Age)&(training$Sex=="female"),]$Age<-AvrAges['female']
temp<-testing[!is.na(testing$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
testing[is.na(testing$Age)&(testing$Sex=="male"),]$Age<-AvrAges['male']
testing[is.na(testing$Age)&(testing$Sex=="female"),]$Age<-AvrAges['female']
str(training)
training<-transform(training,Name=as.character(Name))
str(training)
training<-transform(training,Ticket=as.character(Ticket))
training<-transform(training,Cabin=as.character(Cabin))
str(training)
testing<-transform(testing,Pclass=as.factor(Pclass))
testing$Survived<-as.factor("Survived")
testing<-transform(testing,Name=as.character(Name))
testing<-transform(testing,Ticket=as.character(Ticket))
testing<-transform(testing,Cabin=as.character(Cabin))
plot(training$Pclass,training$Fare,xlab="Pclass",ylab="Fare")
testing$Survived<-as.factor("Survived")
testing<-transform(testing,Name=as.character(Name))
testing<-transform(testing,Ticket=as.character(Ticket))
testing<-transform(testing,Cabin=as.character(Cabin))
testing<-transform(testing,SibSp=as.factor(SibSp))
testing<-transform(testing,Parch=as.factor(Parch))
library(caret)
library(rattle)
modFit<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="rpart")
fancyRpartPlot(modFit$finalModel)
modFit
modFit<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="lda")
modFit
library(e1071)
modFit<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.5)
confusionMatrix(modFit$fitted,training$Survived)
confusionMatrix(modFit$fitted,training$Survived)
modFit$fitted
training$Survived
table(modFit$fitted,training$Survived)
dim(training)
length(modFit$fitted)
modFit<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.5)
2.LDA model
confusionMatrix(modFit$fitted,training$Survived)
library(e1071)
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.5)
confusionMatrix(modFit3$fitted,training$Survived)
modFit2<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="lda")
modFit2
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="polynomial",cost=10,gamma=0.5)
confusionMatrix(modFit3$fitted,training$Survived)
library(e1071)
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.5)
modFit3
modFit3$fitted
confusionMatrix(modFit3$fitted,training$Survived)
length(modFit3$fitted)
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.5)
length(modFit3$fitted)
class(modFit3$fitted)
is.na(modFIt$fitted)
is.na(modFit$fitted)
any(is.na(modFit$fitted))
summary(modFit$fitted)
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.5)
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
apply(testing,2,anyNa)
sum(is.na(training$Embarked))
plot(training$Pclass,trainingEmbarked)
plot(training$Pclass,training$Embarked)
plot(training$Embarked,training$Fare)
median(training$EMbarked)
median(na.omit(training$EMbarked))
summary(training$Embarked)
training<-training[!is.na(training$Embarked),]
dim(training)
modFit1<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="rpart")
fancyRpartPlot(modFit1$finalModel)
modFit1
modFit2<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="lda")
modFit2
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.5)
confusionMatrix(modFit3$fitted,training$Survived)
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="polynomial",cost=10,gamma=0.5)
confusionMatrix(modFit3$fitted,training$Survived)
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="polynomial",cost=1,gamma=0.5)
confusionMatrix(modFit3$fitted,training$Survived)
pred<-predict(modFit3,testing)
testing$Survived<-as.factor("Survived")
pred<-predict(modFit3,testing)
?svm
apply(testing,2,anyNa)
names(testing)
str(testing)
str(training)
training[training$Survived==0,]$Survived<-"Dead"
training[training$Survived==1,]$Survived<-"Survived"
training<-transform(training,Survived=as.factor(Survived))
training<-transform(training,Pclass=as.factor(Pclass))
training<-transform(training,Name=as.character(Name))
training<-transform(training,Ticket=as.character(Ticket))
training<-transform(training,Cabin=as.character(Cabin))
training<-transform(training,SibSp=as.factor(SibSp))
training<-transform(training,Parch=as.factor(Parch))
testing<-transform(testing,Pclass=as.factor(Pclass))
testing$Survived<-as.factor("Survived")
testing<-transform(testing,Name=as.character(Name))
testing<-transform(testing,Ticket=as.character(Ticket))
testing<-transform(testing,Cabin=as.character(Cabin))
testing<-transform(testing,SibSp=as.factor(SibSp))
testing<-transform(testing,Parch=as.factor(Parch))
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
apply(testing,2,anyNa)
temp<-training[!is.na(training$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges['male']
training[is.na(training$Age)&(training$Sex=="female"),]$Age<-AvrAges['female']
temp<-testing[!is.na(testing$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
testing[is.na(testing$Age)&(testing$Sex=="male"),]$Age<-AvrAges['male']
testing[is.na(testing$Age)&(testing$Sex=="female"),]$Age<-AvrAges['female']
training<-training[!is.na(training$Embarked),]
temp<-training[!is.na(training$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
AvrAges
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges['male']
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges[1]
AvrAges['male']
url = "E:\\My Document\\我的项目\\自学课程\\Kaggle Projects\\Titanic Survivors\\"
training = read.csv(paste0(url,"train.csv"),na.strings="")
testing = read.csv(paste0(url,"test.csv"),na.strings="")
dim(training)
dim(testing)
str(training)
training[training$Survived==0,]$Survived<-"Dead"
training[training$Survived==1,]$Survived<-"Survived"
training<-transform(training,Survived=as.factor(Survived))
training<-transform(training,Pclass=as.factor(Pclass))
training<-transform(training,Name=as.character(Name))
training<-transform(training,Ticket=as.character(Ticket))
training<-transform(training,Cabin=as.character(Cabin))
training<-transform(training,SibSp=as.factor(SibSp))
training<-transform(training,Parch=as.factor(Parch))
testing<-transform(testing,Pclass=as.factor(Pclass))
testing$Survived<-as.factor("Survived")
testing<-transform(testing,Name=as.character(Name))
testing<-transform(testing,Ticket=as.character(Ticket))
testing<-transform(testing,Cabin=as.character(Cabin))
testing<-transform(testing,SibSp=as.factor(SibSp))
testing<-transform(testing,Parch=as.factor(Parch))
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
apply(testing,2,anyNa)
temp<-training[!is.na(training$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges['male']
training[is.na(training$Age)&(training$Sex=="female"),]$Age<-AvrAges['female']
temp<-testing[!is.na(testing$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
testing[is.na(testing$Age)&(testing$Sex=="male"),]$Age<-AvrAges['male']
testing[is.na(testing$Age)&(testing$Sex=="female"),]$Age<-AvrAges['female']
training<-training[!is.na(training$Embarked),]
plot(training$Sex,training$Survived,main="Survived Proportion Upon Gender",xlab="Gender",ylab="SUrvived Status")
plot(training$Pclass,training$Fare,xlab="Pclass",ylab="Fare")
library(caret)
library(rattle)
modFit1<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="rpart")
fancyRpartPlot(modFit1$finalModel)
modFit1
modFit2<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="lda")
modFit2
library(e1071)
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.5)
confusionMatrix(modFit3$fitted,training$Survived)
pred<-predict(modFit3,testing)
names(testing)
str(testing)
str(training)
pred<-predict(modFit3,testing[,-12])
apply(training,2,anyNa)
apply(testing,2,anyNa)
?relevel
install.packages("plyr")
install.packages("plyr")
data(iris)
names(iris)
fit=train(Species~.,data=iris,method="glm")
sum(is.na(iris)
)
fit=train(Species~.,data=iris,method="rpart")
fit=train(Species~.,data=iris,method="svm")
fit=svm(Species~.,data=iris,cost=10)
fit$fitted
pred=predict(fit,iris)
iris2=iris[,-3]
names(iris)
names(iris2)
iris2$Petal.Length=iris$Petal.Length
pred=predict(fit,iris2)
names(iris2)
pred<-predict(modFit3,testing[,-12])
pred<-predict(modFit3,testing)
pred<-predict(modFit3,training)
names(testing)
names(training)
str(training)
str(testing)
url = "E:\\My Document\\我的项目\\自学课程\\Kaggle Projects\\Titanic Survivors\\"
training = read.csv(paste0(url,"train.csv"),na.strings="")
testing = read.csv(paste0(url,"test.csv"),na.strings="")
dim(training)
dim(testing)
training[training$Survived==0,]$Survived<-"Dead"
training[training$Survived==1,]$Survived<-"Survived"
training<-transform(training,Survived=as.factor(Survived))
training<-transform(training,Pclass=as.factor(Pclass))
training<-transform(training,Name=as.character(Name))
training<-transform(training,Ticket=as.character(Ticket))
training<-transform(training,Cabin=as.character(Cabin))
testing<-transform(testing,Pclass=as.factor(Pclass))
testing$Survived<-as.factor("Survived")
testing<-transform(testing,Name=as.character(Name))
testing<-transform(testing,Ticket=as.character(Ticket))
testing<-transform(testing,Cabin=as.character(Cabin))
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
apply(testing,2,anyNa)
temp<-training[!is.na(training$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges['male']
training[is.na(training$Age)&(training$Sex=="female"),]$Age<-AvrAges['female']
temp<-testing[!is.na(testing$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
testing[is.na(testing$Age)&(testing$Sex=="male"),]$Age<-AvrAges['male']
testing[is.na(testing$Age)&(testing$Sex=="female"),]$Age<-AvrAges['female']
training<-training[!is.na(training$Embarked),]
modFit1<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="rpart")
fancyRpartPlot(modFit1$finalModel)
modFit1
modFit2<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="lda")
modFit2
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.5)
confusionMatrix(modFit3$fitted,training$Survived)
pred<-predict(modFit3,testing)
pred
testing$Survived<-pred
summary(testing$Survived)
length(pred)
confusionMatrix(modFit3$fitted,training$Survived)
str(testing)
modFit3
pred<-predict(modFit3,testing)
pred
modFit3<-svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,kernal="linear",cost=10,gamma=0.1)
confusionMatrix(modFit3$fitted,training$Survived)
pred<-predict(modFit3,testing)
pred
url = "E:\\My Document\\我的项目\\自学课程\\Kaggle Projects\\Titanic Survivors\\"
training = read.csv(paste0(url,"train.csv"),na.strings="")
testing = read.csv(paste0(url,"test.csv"),na.strings="")
dim(training)
dim(testing)
training[training$Survived==0,]$Survived<-"Dead"
training[training$Survived==1,]$Survived<-"Survived"
training<-transform(training,Survived=as.factor(Survived))
training<-transform(training,Pclass=as.factor(Pclass))
training<-transform(training,Name=as.character(Name))
training<-transform(training,Ticket=as.character(Ticket))
training<-transform(training,Cabin=as.character(Cabin))
testing<-transform(testing,Pclass=as.factor(Pclass))
testing$Survived<-as.factor("Survived")
testing<-transform(testing,Name=as.character(Name))
testing<-transform(testing,Ticket=as.character(Ticket))
testing<-transform(testing,Cabin=as.character(Cabin))
temp<-training[!is.na(training$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges['male']
training[is.na(training$Age)&(training$Sex=="female"),]$Age<-AvrAges['female']
temp<-testing[!is.na(testing$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
testing[is.na(testing$Age)&(testing$Sex=="male"),]$Age<-AvrAges['male']
testing[is.na(testing$Age)&(testing$Sex=="female"),]$Age<-AvrAges['female']
training<-training[!is.na(training$Embarked),]
library(caret)
library(rattle)
modFit1<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="rpart")
fancyRpartPlot(modFit1$finalModel)
modFit1
pred<-predict(modFit$finalModel,testing)
names(modelFit)
names(modelFit1)
names(modFit1)
pred<-predict(modFit1$finalModel,testing)
names(testing)
names(training)
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
apply(testing,2,anyNa)
str(testing)
str(training)
pred<-predict(modFit1$finalModel,testing)
modFit2<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="lda")
modFit2
pred<-predict(modFit2,testing)
pred
modFit2<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="qda")
modFit2
modFit1<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="bagging")
url = "E:\\My Document\\我的项目\\自学课程\\Kaggle Projects\\Titanic Survivors\\"
training = read.csv(paste0(url,"train.csv"),na.strings="")
testing = read.csv(paste0(url,"test.csv"),na.strings="")
dim(training)
dim(testing)
training[training$Survived==0,]$Survived<-"Dead"
training[training$Survived==1,]$Survived<-"Survived"
training<-transform(training,Survived=as.factor(Survived))
training<-transform(training,Pclass=as.factor(Pclass))
training<-transform(training,Name=as.character(Name))
training<-transform(training,Ticket=as.character(Ticket))
training<-transform(training,Cabin=as.character(Cabin))
testing<-transform(testing,Pclass=as.factor(Pclass))
testing$Survived<-as.factor("Survived")
testing<-transform(testing,Name=as.character(Name))
testing<-transform(testing,Ticket=as.character(Ticket))
testing<-transform(testing,Cabin=as.character(Cabin))
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
apply(testing,2,anyNa)
temp<-training[!is.na(training$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
training[is.na(training$Age)&(training$Sex=="male"),]$Age<-AvrAges['male']
training[is.na(training$Age)&(training$Sex=="female"),]$Age<-AvrAges['female']
temp<-testing[!is.na(testing$Age),]
AvrAges<-tapply(temp$Age,temp$Sex,mean)
testing[is.na(testing$Age)&(testing$Sex=="male"),]$Age<-AvrAges['male']
testing[is.na(testing$Age)&(testing$Sex=="female"),]$Age<-AvrAges['female']
training<-training[!is.na(training$Embarked),]
library(caret)
library(rattle)
modFit1<-train(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked,data=training,method="rpart")
fancyRpartPlot(modFit1$finalModel)
modFit1
pred<-predict(modFit1$finalModel,testing)
pred<-predict(modFit1,testing)
pred
output$PassengerID<-testing$PasengerID
output$Survived<-as.integer(pred)
output<-NULL
output$PassengerID<-testing$PasengerID
output$Survived<-as.integer(pred)
head(output)
output$Survived<-as.integer(pred)-1
head(output)
head(pred)
write.csv(output,"testprediction")
write.csv(output,paste0(url,"testprediction"))
write.csv(output,paste0(url,"testprediction.csv"))
output<-NULL
output$PassengerId<-testing$PasengerId
output$Survived<-as.integer(pred)-1
write.csv(output,paste0(url,"testprediction.csv"))
output<-NULL
output$PassengerId<-testing$PassengerId
output$Survived<-as.integer(pred)-1
write.csv(output,paste0(url,"testprediction.csv"))
write.csv(output,paste0(url,"testprediction.csv"))
output<-NULL
output$PassengerId<-testing$PassengerId
output$Survived<-as.integer(pred)-1
write.csv(output,paste0(url,"testprediction.csv"))
head(output)
output<-testing[,c("PassengerId","Survived")]
head(output)
output$Survived<-as.integer(output$Survived)-1
write.csv(output,paste0(url,"testprediction.csv"))
head(output)
rownames(output)<-NULL
write.csv(output,paste0(url,"testprediction.csv"))
url = "E:\\My Document\\我的项目\\自学课程\\Kaggle Projects\\Titanic Survivors\\"
training = read.csv(paste0(url,"train.csv"),na.strings="")
testing = read.csv(paste0(url,"test.csv"),na.strings="")
dim(training)
dim(testing)
anyNa<-function(column) any(is.na(column))
apply(training,2,anyNa)
apply(testing,2,anyNa)
temp<-training[is.na(training$Age),]
summary(temp$SUrvived)
summary(temp$Survived)
hist(temp$Survived)
table(temp$Survived)
shiny::runApp('~/我的项目/自学课程/算法/遗传算法')
shiny::runApp('~/我的项目/自学课程/算法/遗传算法')
library(ggplot2)
shiny::runApp('~/我的项目/自学课程/算法/遗传算法')
sample(10)
t=sample(10)
len<-length(t)
x<-seq(len)
y<-path()
cityname<-paste0("City",as.character(y))
route<-data.frame(x,y,cityname)
g<-ggplot(route,aes(x,y))
g<g+geom_point(color='red',size=3)
g<-g+geom_line(color='green',size=1)+geom_text(aes(label=cityname))
g<-g+labs(title="Optimal Path for Traveling Salesman",x="City Sequence",y="City Name")
print(g)
t=sample(10)
len<-length(t)
x<-seq(len)
y<-t
cityname<-paste0("City",as.character(y))
route<-data.frame(x,y,cityname)
g<-ggplot(route,aes(x,y))
g<g+geom_point(color='red',size=3)
g<-ggplot(route,aes(x,y))
g<g+geom_point()
g<-ggplot(route,aes(x,y))
g<g+geom_point()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
g<-ggplot(route,aes(x,y))
g<g+geom_point()
shiny::runApp('~/我的项目/自学课程/算法/遗传算法')
?geom_point
shiny::runApp('~/我的项目/自学课程/算法/遗传算法')
shiny::runApp('~/我的项目/自学课程/算法/遗传算法')
?points
?text
shiny::runApp('~/我的项目/自学课程/算法/遗传算法')
shiny::runApp('~/我的项目/自学课程/算法/遗传算法')
shiny::runApp()
